@startuml
title 工厂方法模式
abstract class Product
class ConcreteProduct

Product <|-- ConcreteProduct

abstract class Creator{
    +{abstract} Product factoryMethod()
    +anOperation();
}
class ConcreteCreator{
    Product factoryMethod();
}
Creator <|-- ConcreteCreator
ConcreteProduct <- ConcreteCreator
@enduml

@startuml
title 抽象工厂模式

abstract class ProductA
class ConcreteProductA1
class ConcreteProductA2
ProductA <|-- ConcreteProductA1
ProductA <|-- ConcreteProductA2
abstract class ProductB
class ConcreteProductB1
class ConcreteProductB2
ProductB <|-- ConcreteProductB1
ProductB <|-- ConcreteProductB2

interface AbstractFactory{
    + ProductA createProductA();
    + ProductB createProductB();
}
class ConcreteFactoryA{
    ProductA createProductA();
    ProductB createProductB();
}
class ConcreteFactoryB{
  ProductA createProductA();
  ProductB createProductB();
}
AbstractFactory <|-- ConcreteFactoryA
AbstractFactory <|-- ConcreteFactoryB

ConcreteProductA1 <- ConcreteFactoryA
ConcreteProductA2 <- ConcreteFactoryA
ConcreteProductA1 <- ConcreteFactoryB
ConcreteProductA2 <- ConcreteFactoryB
ConcreteProductB1 <- ConcreteFactoryA
ConcreteProductB2 <- ConcreteFactoryA
ConcreteProductB1 <- ConcreteFactoryB
ConcreteProductB2 <- ConcreteFactoryB


@enduml